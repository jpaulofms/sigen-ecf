/**
 * <p>Title: SIGEN</p>
 *
 * suporte@sigensistemas.com.br</p>
 *
 * @author P. Boaventura (SIGEN)
 * @version 1.0
 */
package com.sigen.ecf.view;

import com.sigen.ecf.model.bean.BeanFormaPagamento;
import com.sigen.ecf.model.bean.BeanLancamento;
import com.sigen.ecf.model.bean.BeanMovimento;
import com.sigen.ecf.model.bean.BeanSangria;
import com.sigen.ecf.model.operacao.Operacao;
import com.sigen.ecf.model.operacao.OperacaoFactory;
import com.sigen.ecf.persistencia.DAOFacade;
import com.sigen.ecf.view.util.SangriaTableModel;
import com.sigen.ecf.view.util.UTILDecimalTableCellEditor;
import com.sigen.ecf.view.util.UTILDecimalTableCellRenderer;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractAction;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;

public class VIEWEfetuarSangria extends javax.swing.JDialog {

    public boolean cancelado = true;
    private String loja;
    private String codEcf;
    private String codMov;
    private String codOper;
    private Map mpSangria;
    private List<BeanSangria> lsValoresSangria = new ArrayList<BeanSangria>();

    public VIEWEfetuarSangria(java.awt.Frame parent, boolean modal, Map parametros) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);

        this.mpSangria = parametros;
        BeanMovimento movimento = (BeanMovimento) parametros.get("BeanMovimento");
        this.codEcf = movimento.getCodEcf();
        this.codMov = movimento.getCodMov();
        this.codOper = movimento.getCodOper();
        this.loja = movimento.getLoja();
        preencherTabela();

        ESCAction f1Action = new ESCAction();
        pnlOptions.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "ESCAction");
        pnlOptions.getActionMap().put("ESCAction", f1Action);

        FinalizaAction finalizaAction = new FinalizaAction();
        pnlOptions.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F10, 0), "FinalizaAction");
        pnlOptions.getActionMap().put("FinalizaAction", finalizaAction);
    }

    private void configurarDataTable() {

        gridSangria.getColumnModel().getColumn(1).setCellRenderer(new UTILDecimalTableCellRenderer());
        gridSangria.getColumnModel().getColumn(1).setCellEditor(new UTILDecimalTableCellEditor());
        gridSangria.getColumnModel().getColumn(2).setCellRenderer(new UTILDecimalTableCellRenderer());
        gridSangria.getColumnModel().getColumn(2).setCellEditor(new UTILDecimalTableCellEditor());
        gridSangria.setRowHeight(25);
        gridSangria.putClientProperty("terminatedEditOnFocusLost", Boolean.TRUE);
        gridSangria.setCellSelectionEnabled(true);
        setLocationRelativeTo(null);
//        tblSangrias.setColumnSelectionInterval(2, 2);
//        tblSangrias.setRowSelectionInterval(0, 0);
        gridSangria.requestFocus();

        gridSangria.setAutoCreateColumnsFromModel(false);
        gridSangria.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);


        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        gridSangria = new javax.swing.JTable();
        pnlOptions = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SANGRIA");
        setFocusable(false);

        gridSangria.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        gridSangria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Descrição", "Valor(R$)", "Valor da Sangria"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gridSangria.setColumnSelectionAllowed(true);
        gridSangria.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        gridSangria.getTableHeader().setReorderingAllowed(false);

        jScrollPane1.setViewportView(gridSangria);
        gridSangria.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        pnlOptions.setFocusable(false);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("<ESC> - CANCELA SANGRIA");
        jLabel1.setFocusable(false);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setText("<F10> - FINALIZA SANGRIA");
        jLabel2.setFocusable(false);

        javax.swing.GroupLayout pnlOptionsLayout = new javax.swing.GroupLayout(pnlOptions);
        pnlOptions.setLayout(pnlOptionsLayout);
        pnlOptionsLayout.setHorizontalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlOptionsLayout.setVerticalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable gridSangria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlOptions;
    // End of variables declaration//GEN-END:variables

    private class ESCAction extends AbstractAction {

        public ESCAction() {
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            dispose();
        }
    }

    private class FinalizaAction extends AbstractAction {

        public FinalizaAction() {
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            confirmar();
        }
    }

    private void preencherTabela() {
        // Lancamentos
        BeanLancamento beanLancamento = new BeanLancamento();
        beanLancamento.setCodEcf(codEcf);
        beanLancamento.setLoja(loja);
        beanLancamento.setCodMov(codMov);

        String clausulaLancamento = " AND (TIPO_FORMA_PAGAMENTO = 'DIN' OR TIPO_FORMA_PAGAMENTO = 'CHE') "
                + "GROUP BY TIPO_FORMA_PAGAMENTO, COD_FORMA_PAGAMENTO "
                + "ORDER BY COD_FORMA_PAGAMENTO ";


        List<BeanLancamento> lsLancamentos = DAOFacade.getLsLancamentoPorTipo(beanLancamento, clausulaLancamento);
        if (!lsLancamentos.isEmpty()) {
            BigDecimal totalLancamentoDinheiro = lsLancamentos.get(0).getValorBruto();
            BigDecimal totalLancamentoCheque = lsLancamentos.size() > 1 ? lsLancamentos.get(1).getValorBruto() : BigDecimal.ZERO;

            // Efetuadas
            BeanSangria beanSangria = new BeanSangria();
            beanSangria.setCodEcf(codEcf);
            beanSangria.setLoja(loja);
            beanSangria.setCodMov(codMov);
            List<BeanSangria> lsTotaisSangriaPorTipo = DAOFacade.getLsSangriaPorTipo(beanSangria);
            BigDecimal totalSangriaDinheiro = !lsTotaisSangriaPorTipo.isEmpty() ? lsTotaisSangriaPorTipo.get(0).getValorSangria() : BigDecimal.ZERO;
            BigDecimal totalSangriaCheque = lsTotaisSangriaPorTipo.size() > 1 ? lsTotaisSangriaPorTipo.get(1).getValorSangria() : BigDecimal.ZERO;


            BeanSangria sangriaDinheiro = new BeanSangria();
            sangriaDinheiro.setTipoFormaPagamento("DINHEIRO");
            sangriaDinheiro.setTotalSangrar(totalLancamentoDinheiro.subtract(totalSangriaDinheiro));
            sangriaDinheiro.setValorSangria(BigDecimal.ZERO);

            BeanSangria sangriaCheque = new BeanSangria();
            sangriaCheque.setTipoFormaPagamento("CHEQUE");
            sangriaCheque.setTotalSangrar(totalLancamentoCheque.subtract(totalSangriaCheque));
            sangriaCheque.setValorSangria(BigDecimal.ZERO);

            lsValoresSangria.add(sangriaDinheiro);
            lsValoresSangria.add(sangriaCheque);

            setTableModel(lsValoresSangria);
        } else {
            JOptionPane.showMessageDialog(this, "Não há lancamentos efetuados no movimento atual", "Efetuar Sangria", JOptionPane.WARNING_MESSAGE);
            dispose();
        }
    }

    private void setTableModel(List<BeanSangria> lsSangria) {

        gridSangria.setModel(new SangriaTableModel(lsSangria));
        gridSangria.setSelectionModel(new DefaultListSelectionModel() {
            @Override
            public String toString() {
                return "gridSangria";
            }
        });

        configurarDataTable();
//        FontMetrics fm = gridProduto.getFontMetrics(new java.awt.Font("Arial", 1, 18));
//        gridProduto.setColumnModel(new ProdutoColumnModel(fm));

        if (!lsSangria.isEmpty()) {
            gridSangria.setColumnSelectionInterval(2, 2);
            gridSangria.setRowSelectionInterval(0, 0);
            gridSangria.requestFocus();
        }
    }

    private void confirmar() {
        List<BeanSangria> lsSangria = new ArrayList<BeanSangria>();
        List<String> lsDescricaoForma = new ArrayList<String>();

        for (int i = 0; i < gridSangria.getRowCount(); i++) {
            String descricaoForma = String.valueOf(gridSangria.getValueAt(i, 0));
            BigDecimal valorSangria = new BigDecimal(String.valueOf(gridSangria.getValueAt(i, 2)));
            BigDecimal totalSangrar = new BigDecimal(String.valueOf(gridSangria.getValueAt(i, 1)));

            if (valorSangria.compareTo(BigDecimal.ZERO) > 0) {
                if (valorSangria.compareTo(totalSangrar) <= 0) {
                    /* Texto com observação da sangria */
                    VIEWObservacao observacao = new VIEWObservacao(null, true, descricaoForma);
                    observacao.setVisible(true);
                    if (!observacao.cancelado) {
                        String txtObservacao = observacao.getTextObservacao();

                        BeanSangria sangria = new BeanSangria();

                        sangria.setCodEcf(codEcf);
                        sangria.setCodMov(codMov);
                        sangria.setLoja(loja);
                        sangria.setCodOper(codOper);
                        sangria.setObservacao(txtObservacao);

                        BeanFormaPagamento formaPagamento = new BeanFormaPagamento();
                        formaPagamento.setDescricao(descricaoForma);

                        // COD FORMA PAGAMENTO
                        BeanFormaPagamento fpSangria = DAOFacade.getFormaPagamento(formaPagamento);

                        sangria.setCodFormaPagamento(fpSangria.getCodFormaPagto());
                        sangria.setValorSangria(valorSangria);
                        sangria.setTipoFormaPagamento(fpSangria.getTipo());

                        lsSangria.add(sangria);
                        lsDescricaoForma.add(descricaoForma);
                    } else {
                        return;
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Valor inválido", "Efetuar Sangria", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
        if (!lsSangria.isEmpty()) {
            mpSangria.put("lsSangria", lsSangria);
            mpSangria.put("lsDescricaoForma", lsDescricaoForma);
            Operacao efetuarSangria = OperacaoFactory.getInstance().criarOPSangria();
            efetuarSangria.executar(mpSangria);
            dispose();
        }
    }
}
